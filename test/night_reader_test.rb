require "./lib/night_reader"
require_relative "test_helper"
require "pry"

class NightReaderTest < Minitest::Test

  def test_instance_of_night_reader
    nr = NightReader.new

    assert_instance_of NightReader, nr
  end

  def test_it_can_split_into_braille_into_three_rows
    skip
    nr = NightReader.new
    nr.split_into_rows(["..0.0.0.0.......0.0.0.0.......0.0.0.0.....0.0.0.0.......0.0.0.0.......0.0.0.0.....0.0.0.0.......0.0.0.0.......0.0.0.0......00.0.0.0....0..000..00..00000..000.0.\n",
                        "..0..00..00.....0..00..00.....0..00..000..0..00..00.....0..00..00.....0..00..000..0..00..00.....0..00..00.....0..00..00...0000.000.0..0....0.000000..000...0.0..\n",
                        ".00.0.00.......00.0.00.......00.0.00..0..00.0.00.......00.0.00.......00.0.00..0..00.0.00.......00.0.00.......00.0.00..00.00.....0...0.0...0.0.0.....0...00000.00\n",
                        "..000.00..000....00.0..0..000.00...0..0.0...000.000...000..00..00000..000.0...000.00...0.00000...00.0..0..000.00...0..0.0....00.0000..000..00..00000..000.0...00\n",
                        ".......0...0.0..0000..00.......0..00..0..0...0.0.0.0...0.000000..000...0.0.........0..0.0..000..0000..00.......0..00..0..0..0....000...0.000000..000...0.0......\n",
                        "......0.....0...0.....0.......0.0.0...........0.0....00.0.0.....0...00000.00......0...0...0.....0.....0.......0.0.0.........0.000....00.0.0.....0...00000.00....\n",])


  assert_equal ["..0.0.0.0.......0.0.0.0.......0.0.0.0.....0.0.0.0.......0.0.0.0.......0.0.0.0.....0.0.0.0.......0.0.0.0.......0.0.0.0......00.0.0.0....0..000..00..00000..000.0.
+", "..000.00..000....00.0..0..000.00...0..0.0...000.000...000..00..00000..000.0...000.00...0.00000...00.0..0..000.00...0..0.0....00.0000..000..00..00000..000.0...00
 "], nr.first_row
  assert_equal ["..0..00..00.....0..00..00.....0..00..000..0..00..00.....0..00..00.....0..00..000..0..00..00.....0..00..00.....0..00..00...0000.000.0..0....0.000000..000...0.0..",
     ".......0...0.0..0000..00.......0..00..0..0...0.0.0.0...0.000000..000...0.0.........0..0.0..000..0000..00.......0..00..0..0..0....000...0.000000..000...0.0......"], nr.second_row
  assert_equal [".00.0.00.......00.0.00.......00.0.00..0..00.0.00.......00.0.00.......00.0.00..0..00.0.00.......00.0.00.......00.0.00..00.00.....0...0.0...0.0.0.....0...00000.00",
     "......0.....0...0.....0.......0.0.0...........0.0....00.0.0.....0...00000.00......0...0...0.....0.....0.......0.0.0.........0.000....00.0.0.....0...00000.00...."], nr.third_row
  end

  def test_can_we_create_two_item_arrays
    nr = NightReader.new
    nr.split_into_rows(["0000000000\n", "..........\n", "0.0.0.0.0.\n"])
    nr.scan_rows

    assert_equal ["00", "00", "00", "00", "00"], nr.first_row
    assert_equal ["..", "..", "..", "..", ".."], nr.second_row
    assert_equal ["0.", "0.", "0.", "0.", "0."], nr.third_row
  end

  def test_can_we_zip_the_rows
    nr = NightReader.new
    nr.split_into_rows(["0000000000\n", "..........\n", "0.0.0.0.0.\n"])
    nr.scan_rows

    assert_equal "00..0.00..0.00..0.00..0.00..0.", nr.zip_rows
  end

  def test_convert_to_braille_string_arrays
    nr = NightReader.new
    nr.split_into_rows(["0.0.0.0.0....00.0.0.00", "00.00.0..0..00.0000..0", "....0.0.0....00.0.0..."])
    nr.scan_rows
    nr.zip_rows

    assert_equal ["0.00..", "0..0..", "0.0.0.", "0.0.0."]
  end
end
